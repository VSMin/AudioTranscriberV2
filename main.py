import os
import time
import telebot
import requests
import openai
from keep_alive import keep_alive

# –ö–ª—é—á–∏
bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not bot_token or not assembly_key or not openai.api_key:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

bot = telebot.TeleBot(bot_token)
keep_alive()

@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f'https://api.telegram.org/file/bot{bot_token}/{file_path}'

        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_data = requests.get(file_url).content

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ AssemblyAI
        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )
        if upload_resp.status_code != 200:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        audio_url = upload_resp.json()["upload_url"]

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )

        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_req.text}")
            return

        bot.reply_to(message, "üîÅ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

        # Polling
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()

        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()
            if poll["status"] == "completed":
                utterances = poll.get("utterances", [])
                if not utterances:
                    text = poll.get("text", "")
                    if not text:
                        bot.reply_to(message, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                        return
                    result_text = text
                else:
                    first_speaker = utterances[0]["speaker"]
                    second_speaker = next((u["speaker"] for u in utterances if u["speaker"] != first_speaker), first_speaker + 1)
                    speaker_map = {
                        first_speaker: "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä",
                        second_speaker: "üë§ –ö–ª–∏–µ–Ω—Ç"
                    }
                    result_text = ""
                    for u in utterances:
                        who = speaker_map.get(u["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {str(u['speaker'])}")
                        result_text += f"{who}: {u['text']}\n"

                bot.reply_to(message, f"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n{result_text[:3000]}")  # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª—è Telegram

                bot.reply_to(message, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...")

                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
                prompt = (
                    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º. "
                    "–í—ã–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –æ—Ü–µ–Ω–∏ –±–µ—Å–µ–¥—É –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏, "
                    "—á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞—Ö.\n\n"
                    f"{result_text}"
                )

                chat_resp = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –∞–Ω–∞–ª–∏–∑—É –∑–≤–æ–Ω–∫–æ–≤."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.7
                )

                analysis = chat_resp["choices"][0]["message"]["content"]
                bot.reply_to(message, f"üìã –û—Ç—á–µ—Ç:\n\n{analysis[:3000]}")  # —Ç–æ–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll['error']}")
                break

            elif time.time() - start_time > 90:
                bot.reply_to(message, "‚è∞ Timeout: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")

bot.polling(none_stop=True)
