import os
import time
import telebot
import requests
from keep_alive import keep_alive

bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")

if not bot_token or not assembly_key:
    raise ValueError("TELEGRAM_TOKEN –∏–ª–∏ ASSEMBLYAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")

bot = telebot.TeleBot(bot_token)
keep_alive()

@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f'https://api.telegram.org/file/bot{bot_token}/{file_path}'

        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_data = requests.get(file_url).content

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ AssemblyAI
        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )
        if upload_resp.status_code != 200:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        audio_url = upload_resp.json()["upload_url"]

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≥–æ–ª–æ—Å–∞–º
        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True  # <-- –≤–∫–ª—é—á–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º
            }
        )

        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_req.text}")
            return

        bot.reply_to(message, "üîÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()
        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()
            if poll["status"] == "completed":
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º
                if "utterances" in poll:
                    result = ""
                    utterances = poll["utterances"]
                
                    first_speaker = utterances[0]["speaker"]
                    second_speaker = next((u["speaker"] for u in utterances if u["speaker"] != first_speaker), None)
                
                    speaker_map = {
                        first_speaker: "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä",
                        second_speaker: "üë§ –ö–ª–∏–µ–Ω—Ç"
    }

    for utt in utterances:
        who = speaker_map.get(utt["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {utt['speaker']}")
        result += f"{who}: {utt['text']}\n"

                else:
                    # fallback ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    result = poll["text"] or "‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."

                bot.reply_to(message, f"üìù –ì–æ—Ç–æ–≤–æ:\n\n{result}")
                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll['error']}")
                break

            elif time.time() - start_time > 60:
                bot.reply_to(message, "‚è∞ Timeout: —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")

bot.polling(none_stop=True)
