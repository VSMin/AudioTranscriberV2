import os
import time
import telebot
import requests
import io
from fpdf import FPDF
from keep_alive import keep_alive
import openai

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
openai.api_key = os.getenv("OPENAI_API_KEY")

if not bot_token or not assembly_key or not openai.api_key:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

bot = telebot.TeleBot(bot_token)
keep_alive()

@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_info.file_path}"
        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_data = requests.get(file_url).content

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ AssemblyAI
        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )
        upload_json = upload_resp.json()
        if "upload_url" not in upload_json:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_json}")
            return

        audio_url = upload_json["upload_url"]

        # –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )
        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞.")
            return

        bot.reply_to(message, "üîÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()
        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()

            if poll["status"] == "completed":
                utterances = poll.get("utterances", [])
                if not utterances:
                    text = poll.get("text", "‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                    send_report_pdf(message.chat.id, text, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏", "–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
                    return

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                speaker_roles = {}
                for utt in utterances:
                    if any(word in utt["text"].lower() for word in ["–∫–æ–Ω–Ω–µ–∫—Ç", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω"]):
                        speaker_roles[utt["speaker"]] = "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä"
                    elif utt["speaker"] not in speaker_roles:
                        speaker_roles[utt["speaker"]] = "üë§ –ö–ª–∏–µ–Ω—Ç"

                # –°–±–æ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–∞
                dialogue = ""
                for utt in utterances:
                    who = speaker_roles.get(utt["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {utt['speaker']}")
                    dialogue += f"{who}: {utt['text']}\n"

                # –ê–Ω–∞–ª–∏–∑ —Å OpenAI
                gpt_response = openai.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –í—ã–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä."
                        },
                        {
                            "role": "user",
                            "content": dialogue
                        }
                    ]
                )
                analysis = gpt_response.choices[0].message.content.strip()

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF
                send_report_pdf(message.chat.id, dialogue, "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π", analysis)
                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {poll.get('error')}")
                break

            elif time.time() - start_time > 60:
                bot.reply_to(message, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n\n{e}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞
def send_report_pdf(chat_id, dialogue, roles_info, analysis):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_font("Arial", "", "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", uni=True)
    pdf.set_font("Arial", size=12)

    pdf.multi_cell(0, 10, f"üìã –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–≤–æ–Ω–∫–∞:\n\n{dialogue}\n\n")
    pdf.multi_cell(0, 10, f"üîé –†–æ–ª–∏: {roles_info}\n\n")
    pdf.multi_cell(0, 10, f"üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{analysis}")

    pdf_output = io.BytesIO()
    pdf.output(pdf_output)
    pdf_output.seek(0)

    bot.send_document(chat_id, ("report.pdf", pdf_output))

bot.polling(none_stop=True)
