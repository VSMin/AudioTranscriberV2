import os
import time
import telebot
import requests
import openai
from keep_alive import keep_alive

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ASSEMBLYAI_API_KEY = os.getenv("ASSEMBLYAI_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
if not TELEGRAM_TOKEN or not ASSEMBLYAI_API_KEY or not OPENAI_API_KEY:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∏ Telegram
openai.api_key = OPENAI_API_KEY
bot = telebot.TeleBot(TELEGRAM_TOKEN)

keep_alive()  # Flask-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Railway –Ω–µ –∑–∞—Å—ã–ø–∞–ª

@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_url = f'https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}'

        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        audio_data = requests.get(file_url).content

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ AssemblyAI
        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": ASSEMBLYAI_API_KEY},
            data=audio_data
        )
        upload_url = upload_resp.json().get("upload_url")
        if not upload_url:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        # –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_resp = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": ASSEMBLYAI_API_KEY},
            json={
                "audio_url": upload_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )
        transcript_id = transcript_resp.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_resp.text}")
            return

        bot.reply_to(message, "üîÅ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()
        while True:
            poll = requests.get(polling_url, headers={"authorization": ASSEMBLYAI_API_KEY}).json()
            if poll["status"] == "completed":
                utterances = poll.get("utterances", [])
                if not utterances:
                    bot.reply_to(message, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
                    return

                # –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤ ‚Äî –ø–µ—Ä–≤—ã–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                speaker_map = {}
                unique_speakers = list({u['speaker'] for u in utterances})
                if len(unique_speakers) >= 2:
                    speaker_map[unique_speakers[0]] = "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä"
                    speaker_map[unique_speakers[1]] = "üë§ –ö–ª–∏–µ–Ω—Ç"
                else:
                    speaker_map[unique_speakers[0]] = "üó£ –°–ø–∏–∫–µ—Ä"

                # –°–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
                dialogue = ""
                for utt in utterances:
                    speaker = speaker_map.get(utt["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {utt['speaker']}")
                    dialogue += f"{speaker}: {utt['text']}\n"

                bot.reply_to(message, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                prompt = f"""–í–æ—Ç —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n{dialogue}\n\n
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –ö–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –±—ã–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞?
2. –ö–∞–∫–∏–µ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?
3. –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ —É–ª—É—á—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä?
4. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å –ø—É–Ω–∫—Ç–∞–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""

                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –∞—É–¥–∏—Ç–æ—Ä –∑–≤–æ–Ω–∫–æ–≤."},
                        {"role": "user", "content": prompt}
                    ]
                )

                analysis = response.choices[0].message.content.strip()

                bot.reply_to(message, f"üìÑ –ì–æ—Ç–æ–≤–æ!\n\nüó£ –î–∏–∞–ª–æ–≥:\n{dialogue}\n\nüîç –ê–Ω–∞–ª–∏–∑:\n{analysis}")
                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll['error']}")
                break

            elif time.time() - start_time > 120:
                bot.reply_to(message, "‚è∞ Timeout: —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")

bot.polling(none_stop=True)
