import os
import time
import telebot
import requests
import openai
from fpdf import FPDF
from keep_alive import keep_alive

bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
openai.api_key = os.getenv("OPENAI_API_KEY")

if not bot_token or not assembly_key or not openai.api_key:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

bot = telebot.TeleBot(bot_token)
keep_alive()

def –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å_—Ä–æ–ª–∏(utterances):
    –º–µ–Ω–µ–¥–∂–µ—Ä_—Ñ—Ä–∞–∑—ã = [
        "—è –∑–≤–æ–Ω—é", "–∫–æ–º–ø–∞–Ω–∏—è", "–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
        "—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ø—Ä–æ–≤–∞–π–¥–µ—Ä", "–¥–æ–≥–æ–≤–æ—Ä"
    ]
    —á–∞—Å—Ç–æ—Ç–∞ = {}
    for u in utterances:
        speaker = u["speaker"]
        if speaker not in —á–∞—Å—Ç–æ—Ç–∞:
            —á–∞—Å—Ç–æ—Ç–∞[speaker] = 0
        if any(–∫–ª—é—á in u["text"].lower() for –∫–ª—é—á in –º–µ–Ω–µ–¥–∂–µ—Ä_—Ñ—Ä–∞–∑—ã):
            —á–∞—Å—Ç–æ—Ç–∞[speaker] += 1
    if not —á–∞—Å—Ç–æ—Ç–∞:
        return {0: "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä", 1: "üë§ –ö–ª–∏–µ–Ω—Ç"}
    –º–µ–Ω–µ–¥–∂–µ—Ä = max(—á–∞—Å—Ç–æ—Ç–∞, key=—á–∞—Å—Ç–æ—Ç–∞.get)
    –∫–ª–∏–µ–Ω—Ç = 1 - –º–µ–Ω–µ–¥–∂–µ—Ä
    return {–º–µ–Ω–µ–¥–∂–µ—Ä: "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä", –∫–ª–∏–µ–Ω—Ç: "üë§ –ö–ª–∏–µ–Ω—Ç"}

def —Å–æ–∑–¥–∞—Ç—å_pdf_–æ—Ç—á–µ—Ç(—Ç–µ–∫—Å—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
    pdf.set_font('DejaVu', '', 12)
    pdf.multi_cell(0, 10, —Ç–µ–∫—Å—Ç)
    pdf.ln(10)
    pdf.set_font('DejaVu', '', 11)
    pdf.multi_cell(0, 10, "\n--- –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---\n" + –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    –ø—É—Ç—å = "/app/report.pdf"
    pdf.output(–ø—É—Ç—å)
    return –ø—É—Ç—å

@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f'https://api.telegram.org/file/bot{bot_token}/{file_path}'

        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        audio_data = requests.get(file_url).content

        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )
        if upload_resp.status_code != 200:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        audio_url = upload_resp.json()["upload_url"]

        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )

        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_req.text}")
            return

        bot.reply_to(message, "üîÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()

        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()
            if poll["status"] == "completed":
                if "utterances" in poll:
                    utterances = poll["utterances"]
                    speaker_map = –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å_—Ä–æ–ª–∏(utterances)
                    result = ""
                    for utt in utterances:
                        who = speaker_map.get(utt["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {utt['speaker']}")
                        result += f"{who}: {utt['text']}\n"
                else:
                    result = poll["text"] or "‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                gpt_response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —É–∫–∞–∂–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."},
                        {"role": "user", "content": result}
                    ]
                )
                –∞–Ω–∞–ª–∏–∑ = gpt_response.choices[0].message.content.strip()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∞–Ω–∞–ª–∏–∑
                bot.reply_to(message, f"üìù –ì–æ—Ç–æ–≤–æ:\n\n{result}\n\nüìä –ê–Ω–∞–ª–∏–∑:\n{–∞–Ω–∞–ª–∏–∑}")

                # PDF
                try:
                    –ø—É—Ç—å = —Å–æ–∑–¥–∞—Ç—å_pdf_–æ—Ç—á–µ—Ç(result, –∞–Ω–∞–ª–∏–∑)
                    with open(–ø—É—Ç—å, "rb") as f:
                        bot.send_document(message.chat.id, f, caption="üìé PDF-–æ—Ç—á–µ—Ç")
                except Exception as e:
                    bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {e}")
                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll['error']}")
                break

            elif time.time() - start_time > 60:
                bot.reply_to(message, "‚è∞ Timeout: —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n\n{e}")

bot.polling(none_stop=True)
