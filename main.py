import os
import time
import telebot
import requests
from fpdf import FPDF
import openai
from keep_alive import keep_alive

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
openai.api_key = os.getenv("OPENAI_API_KEY")

if not bot_token or not assembly_key or not openai.api_key:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

bot = telebot.TeleBot(bot_token)
keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ—Ç Flask-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Railway, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_url = f'https://api.telegram.org/file/bot{bot_token}/{file_info.file_path}'
        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        audio_data = requests.get(file_url).content

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ AssemblyAI
        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )
        if upload_resp.status_code != 200:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        audio_url = upload_resp.json()["upload_url"]

        # –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )
        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_req.text}")
            return

        bot.reply_to(message, "üîÅ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()
        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()
            if poll["status"] == "completed":
                utterances = poll.get("utterances", [])
                if not utterances:
                    result_text = poll.get("text", "‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")
                else:
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º
                    speaker0 = utterances[0]["speaker"]
                    speaker1 = next((u["speaker"] for u in utterances if u["speaker"] != speaker0), speaker0)
                    speaker_map = {
                        speaker0: "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä",
                        speaker1: "üë§ –ö–ª–∏–µ–Ω—Ç"
                    }
                    result_text = ""
                    for utt in utterances:
                        who = speaker_map.get(utt["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {utt['speaker']}")
                        result_text += f"{who}: {utt['text']}\n"
                break
            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll['error']}")
                return
            elif time.time() - start_time > 120:
                bot.reply_to(message, "‚è∞ Timeout: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è.")
                return
            time.sleep(5)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ OpenAI –Ω–∞ –∞–Ω–∞–ª–∏–∑
        bot.reply_to(message, "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥...")

        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞. –£–∫–∞–∂–∏:
1. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
2. –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∏
3. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–µ—Å–µ–¥—ã
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–î–∏–∞–ª–æ–≥:
{result_text}
"""
        completion = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        analysis_text = completion.choices[0].message.content.strip()

        # –°–æ–∑–¥–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞
        class PDF(FPDF):
            def header(self):
                self.set_font("Arial", "B", 14)
                self.cell(0, 10, "–û—Ç—á—ë—Ç –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—É", ln=True, align="C")
                self.ln(5)

            def footer(self):
                self.set_y(-15)
                self.set_font("Arial", "I", 8)
                self.cell(0, 10, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}", align="C")

        pdf = PDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, "üìã –î–∏–∞–ª–æ–≥:\n\n" + result_text)
        pdf.ln(5)
        pdf.set_font("Arial", style="B", size=12)
        pdf.cell(0, 10, "üìä –ê–Ω–∞–ª–∏–∑:", ln=True)
        pdf.set_font("Arial", size=12)
        pdf.multi_cell(0, 10, analysis_text)

        pdf_path = f"/tmp/report_{file_id}.pdf"
        pdf.output(pdf_path)

        with open(pdf_path, "rb") as pdf_file:
            bot.send_document(message.chat.id, pdf_file, caption="üìé –û—Ç—á—ë—Ç –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—É")

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")

bot.polling(none_stop=True)
