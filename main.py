import os
import time
import requests
import telebot
from fpdf import FPDF
from keep_alive import keep_alive
from openai import OpenAI

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
openai_key = os.getenv("OPENAI_API_KEY")

if not bot_token or not assembly_key or not openai_key:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

bot = telebot.TeleBot(bot_token)
keep_alive()

client = OpenAI(api_key=openai_key)

class PDF(FPDF):
    def header(self):
        self.set_font("Arial", size=12)
        self.cell(0, 10, "–û—Ç—á–µ—Ç –ø–æ –∑–≤–æ–Ω–∫—É", ln=True, align="C")

    def add_section(self, title, content):
        self.set_font("Arial", style='B', size=12)
        self.multi_cell(0, 10, title)
        self.set_font("Arial", size=11)
        self.multi_cell(0, 8, content)
        self.ln()

@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"

        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        audio_data = requests.get(file_url).content

        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )
        if upload_resp.status_code != 200:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        audio_url = upload_resp.json()["upload_url"]

        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )

        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_req.text}")
            return

        bot.reply_to(message, "üîÅ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()

        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()
            if poll["status"] == "completed":
                utterances = poll.get("utterances", [])
                if not utterances:
                    bot.reply_to(message, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
                    return

                first_speaker = utterances[0]["speaker"]
                second_speaker = next((u["speaker"] for u in utterances if u["speaker"] != first_speaker), None)
                speaker_map = {
                    first_speaker: "üë® –ú–µ–Ω–µ–¥–∂–µ—Ä",
                    second_speaker: "üë§ –ö–ª–∏–µ–Ω—Ç"
                }

                dialog_text = ""
                for utt in utterances:
                    who = speaker_map.get(utt["speaker"], f"üó£ –°–ø–∏–∫–µ—Ä {utt['speaker']}")
                    dialog_text += f"{who}: {utt['text']}\n"

                bot.reply_to(message, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...")

                prompt = (
                    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º:\n\n"
                    f"{dialog_text}\n\n"
                    "–í—ã–¥–µ–ª–∏:\n"
                    "- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
                    "- –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
                    "- –û–±—â—É—é –æ—Ü–µ–Ω–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ\n"
                    "- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n\n"
                    "–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                )

                completion = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}]
                )

                analysis = completion.choices[0].message.content

                bot.reply_to(message, "üìÑ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")

                pdf = PDF()
                pdf.add_page()
                pdf.add_section("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞", dialog_text)
                pdf.add_section("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", analysis)

                pdf_path = "/mnt/data/–æ—Ç—á–µ—Ç_–ø–æ_–∑–≤–æ–Ω–∫—É.pdf"
                pdf.output(pdf_path)

                with open(pdf_path, "rb") as f:
                    bot.send_document(message.chat.id, f, caption="‚úÖ –ì–æ—Ç–æ–≤—ã–π PDF-–æ—Ç—á–µ—Ç")

                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll['error']}")
                break

            elif time.time() - start_time > 60:
                bot.reply_to(message, "‚è∞ Timeout: —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")

bot.polling(none_stop=True)
