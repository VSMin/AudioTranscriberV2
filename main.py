import os
import time
import requests
import telebot
from fpdf import FPDF
from io import BytesIO
from keep_alive import keep_alive
import openai

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv("TELEGRAM_TOKEN")
assembly_key = os.getenv("ASSEMBLYAI_API_KEY")
openai_key = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not bot_token or not assembly_key or not openai_key:
    raise ValueError("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ API –∫–ª—é—á–µ–π –Ω–µ –∑–∞–¥–∞–Ω—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = openai_key

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(bot_token)
keep_alive()


def generate_pdf(dialog_text, analysis_text):
    pdf = FPDF()
    pdf.add_page()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –∏ –∏–∑–±–µ–≥–∞–µ–º emoji
    pdf.set_font("Arial", size=12)

    pdf.set_font("Arial", style='B', size=14)
    pdf.cell(0, 10, "–û—Ç—á–µ—Ç –ø–æ –∑–≤–æ–Ω–∫—É", ln=True, align="C")
    pdf.ln(5)

    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "–î–∏–∞–ª–æ–≥:", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, dialog_text)
    pdf.ln(5)

    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "–ê–Ω–∞–ª–∏–∑:", ln=True)
    pdf.set_font("Arial", size=11)
    pdf.multi_cell(0, 8, analysis_text)

    output = BytesIO()
    pdf.output(output)
    output.seek(0)
    return output


def analyze_dialog(dialog_text):
    prompt = (
        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞.\n"
        "1. –í—ã–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
        "2. –û—Ç–º–µ—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ –Ω–µ–¥–æ—á—ë—Ç—ã\n"
        "3. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n\n"
        f"–î–∏–∞–ª–æ–≥:\n{dialog_text}"
    )

    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"


@bot.message_handler(content_types=['audio', 'voice'])
def handle_audio(message):
    try:
        file_id = message.audio.file_id if message.audio else message.voice.file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f'https://api.telegram.org/file/bot{bot_token}/{file_path}'

        bot.reply_to(message, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        audio_data = requests.get(file_url).content

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ AssemblyAI
        upload_resp = requests.post(
            "https://api.assemblyai.com/v2/upload",
            headers={"authorization": assembly_key},
            data=audio_data
        )

        if upload_resp.status_code != 200:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {upload_resp.text}")
            return

        audio_url = upload_resp.json()["upload_url"]

        # –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_req = requests.post(
            "https://api.assemblyai.com/v2/transcript",
            headers={"authorization": assembly_key},
            json={
                "audio_url": audio_url,
                "language_code": "ru",
                "speaker_labels": True
            }
        )

        transcript_id = transcript_req.json().get("id")
        if not transcript_id:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {transcript_req.text}")
            return

        bot.reply_to(message, "üîÅ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        polling_url = f"https://api.assemblyai.com/v2/transcript/{transcript_id}"
        start_time = time.time()

        while True:
            poll = requests.get(polling_url, headers={"authorization": assembly_key}).json()

            if poll["status"] == "completed":
                utterances = poll.get("utterances", [])
                if utterances:
                    speaker_a = utterances[0]["speaker"]
                    speaker_b = next((u["speaker"] for u in utterances if u["speaker"] != speaker_a), None)
                    speaker_map = {
                        speaker_a: "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                        speaker_b: "–ö–ª–∏–µ–Ω—Ç"
                    }
                    dialog_text = ""
                    for utt in utterances:
                        speaker_label = speaker_map.get(utt["speaker"], f"–°–ø–∏–∫–µ—Ä {utt['speaker']}")
                        dialog_text += f"{speaker_label}: {utt['text']}\n"
                else:
                    dialog_text = poll.get("text", "‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
                bot.reply_to(message, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...")
                analysis = analyze_dialog(dialog_text)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
                bot.reply_to(message, "üìÑ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
                pdf_file = generate_pdf(dialog_text, analysis)
                bot.send_document(message.chat.id, ("report.pdf", pdf_file))

                break

            elif poll["status"] == "error":
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {poll.get('error')}")
                break

            elif time.time() - start_time > 60:
                bot.reply_to(message, "‚è∞ –¢–∞–π–º-–∞—É—Ç: —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.")
                break

            time.sleep(5)

    except Exception as e:
        bot.reply_to(message, f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")


bot.polling(none_stop=True)
